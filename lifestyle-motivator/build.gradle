import java.util.jar.Manifest;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.3'
    }
}

apply plugin: 'android'

group = 'edu.ncsu.soc.srgainey'
version = '0.0.1'

repositories {
    mavenCentral()
}

configurations {
    unitTestCompile.extendsFrom runtime
    unitTestRuntime.extendsFrom unitTestCompile
}

sourceSets {
    unitTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/resources')
    }
}


android {
    compileSdkVersion 'Google Inc.:Google APIs:14'
// https://github.com/alexthaler/OpenSesameDroid/blob/22cc14ab0319c007d082986e57719f74e20f3792/build.gradle
 
    sourceSets {
        main {
            manifest {
                // default manifest location is /src/main/AndroidManifest.xml
                srcFile 'AndroidManifest.xml'   
            }
            java {
                srcDir 'src/main/java'
            }
            res {
                srcDir 'src/main/res'
            }
            assets {
                srcDir 'assets'
            }
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: '*.jar'),
            'com.google.code.gson:gson:2.2.2'
        
    unitTestCompile 'junit:junit:4.10',
                'org.javasimon:javasimon-core:3.3.0',
                'org.mockito:mockito-all:1.9.5',
                'com.google.code.gson:gson:2.2.2'
                
    unitTestCompile files("$project.buildDir/classes/debug")
                
}

task unitTest(type:Test, dependsOn: assemble) {
    // see http://tryge.com/2013/02/28/android-gradle-build/
    description = "run unit tests"
    testClassesDir = project.sourceSets.unitTest.output.classesDir
    classpath = project.sourceSets.unitTest.runtimeClasspath
}

check.dependsOn unitTest

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle(":" + descriptor)
    }
}

task listCache << { configurations.compile.each { println it } }

task listJars << { configurations.compile.each { File file -> println file.name } }